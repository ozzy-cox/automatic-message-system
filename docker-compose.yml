services:
  postgres:
    image: postgres:17.2-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=automatic_message_system
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
        - ams-network

  
  redis:
    image: redis:7.4-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes: 
      - redis_data:/data
    networks:
        - ams-network

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:29093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://192.167.1.102:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
        - ams-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:29092
    networks:
        - ams-network


  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=automatic_message_system
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - LOG_FILE=/tmp/log/automatic-message-system/api.log
      - LOG_TO_STDOUT=true
      - PRODUCER_URL=http://producer:8001
      - HOST=127.0.0.1
      - PORT=8080
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
        - ams-network

  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=automatic_message_system
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - LOG_FILE=/tmp/log/automatic-message-system/producer.log
      - LOG_TO_STDOUT=true
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_GROUP_ID=message-consumer
      - KAFKA_TOPIC=messages
      - INTERVAL=1s # TODO Change before commit
      - BATCH_COUNT=2
      - PRODUCER_API_PORT=8001
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    networks:
        - ams-network

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=automatic_message_system
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - LOG_FILE=/tmp/log/automatic-message-system/consumer.log
      - LOG_TO_STDOUT=true
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_GROUP_ID=message-consumer
      - KAFKA_TOPIC=messages
      - KAFKA_TOPIC_RETRY=messages-retry
      # Below is the URL that's used for testing now it's connected to the local test client 
      # with configurable error rate, you can insert a webhook URL here.
      - REQUEST_URL=http://testclient:3000 
    depends_on:
      - testclient
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    networks:
        - ams-network

  retryconsumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=automatic_message_system
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - LOG_FILE=/tmp/log/automatic-message-system/retryconsumer.log
      - LOG_TO_STDOUT=true
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_GROUP_ID=message-consumer
      - KAFKA_TOPIC=messages-retry
      - KAFKA_TOPIC_RETRY=messages-dlq
      - REQUEST_URL=http://testclient:3000
      - RETRY_INTERVAL=3
      - RETRY_COUNT=3
    depends_on:
      - testclient
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    networks:
        - ams-network


  testclient:
    build:
      context: .
      dockerfile: Dockerfile.testclient
    environment:
      ERROR_RATE: 0.5
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
        - ams-network


networks:
  ams-network:
    name: automatic-message-system-network
    driver: bridge

volumes:
  postgres_data:
  redis_data:
